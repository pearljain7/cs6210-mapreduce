// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_masterworker_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_masterworker_2eproto;
namespace masterworker {
class MapReply;
struct MapReplyDefaultTypeInternal;
extern MapReplyDefaultTypeInternal _MapReply_default_instance_;
class MapRequest;
struct MapRequestDefaultTypeInternal;
extern MapRequestDefaultTypeInternal _MapRequest_default_instance_;
class ReduceReply;
struct ReduceReplyDefaultTypeInternal;
extern ReduceReplyDefaultTypeInternal _ReduceReply_default_instance_;
class ReduceRequest;
struct ReduceRequestDefaultTypeInternal;
extern ReduceRequestDefaultTypeInternal _ReduceRequest_default_instance_;
class ShardInfo;
struct ShardInfoDefaultTypeInternal;
extern ShardInfoDefaultTypeInternal _ShardInfo_default_instance_;
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> ::masterworker::MapReply* Arena::CreateMaybeMessage<::masterworker::MapReply>(Arena*);
template<> ::masterworker::MapRequest* Arena::CreateMaybeMessage<::masterworker::MapRequest>(Arena*);
template<> ::masterworker::ReduceReply* Arena::CreateMaybeMessage<::masterworker::ReduceReply>(Arena*);
template<> ::masterworker::ReduceRequest* Arena::CreateMaybeMessage<::masterworker::ReduceRequest>(Arena*);
template<> ::masterworker::ShardInfo* Arena::CreateMaybeMessage<::masterworker::ShardInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace masterworker {

// ===================================================================

class MapReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MapReply) */ {
 public:
  inline MapReply() : MapReply(nullptr) {}
  ~MapReply() override;
  explicit PROTOBUF_CONSTEXPR MapReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapReply(const MapReply& from);
  MapReply(MapReply&& from) noexcept
    : MapReply() {
    *this = ::std::move(from);
  }

  inline MapReply& operator=(const MapReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapReply& operator=(MapReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapReply* internal_default_instance() {
    return reinterpret_cast<const MapReply*>(
               &_MapReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapReply& a, MapReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MapReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapReply& from) {
    MapReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.MapReply";
  }
  protected:
  explicit MapReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntermediateFileLocationFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string intermediate_file_location = 2;
  int intermediate_file_location_size() const;
  private:
  int _internal_intermediate_file_location_size() const;
  public:
  void clear_intermediate_file_location();
  const std::string& intermediate_file_location(int index) const;
  std::string* mutable_intermediate_file_location(int index);
  void set_intermediate_file_location(int index, const std::string& value);
  void set_intermediate_file_location(int index, std::string&& value);
  void set_intermediate_file_location(int index, const char* value);
  void set_intermediate_file_location(int index, const char* value, size_t size);
  std::string* add_intermediate_file_location();
  void add_intermediate_file_location(const std::string& value);
  void add_intermediate_file_location(std::string&& value);
  void add_intermediate_file_location(const char* value);
  void add_intermediate_file_location(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& intermediate_file_location() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_intermediate_file_location();
  private:
  const std::string& _internal_intermediate_file_location(int index) const;
  std::string* _internal_add_intermediate_file_location();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.MapReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> intermediate_file_location_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class ReduceReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ReduceReply) */ {
 public:
  inline ReduceReply() : ReduceReply(nullptr) {}
  ~ReduceReply() override;
  explicit PROTOBUF_CONSTEXPR ReduceReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReduceReply(const ReduceReply& from);
  ReduceReply(ReduceReply&& from) noexcept
    : ReduceReply() {
    *this = ::std::move(from);
  }

  inline ReduceReply& operator=(const ReduceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReduceReply& operator=(ReduceReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReduceReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReduceReply* internal_default_instance() {
    return reinterpret_cast<const ReduceReply*>(
               &_ReduceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReduceReply& a, ReduceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReduceReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReduceReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReduceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReduceReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReduceReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReduceReply& from) {
    ReduceReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReduceReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.ReduceReply";
  }
  protected:
  explicit ReduceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.ReduceReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class MapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MapRequest) */ {
 public:
  inline MapRequest() : MapRequest(nullptr) {}
  ~MapRequest() override;
  explicit PROTOBUF_CONSTEXPR MapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapRequest(const MapRequest& from);
  MapRequest(MapRequest&& from) noexcept
    : MapRequest() {
    *this = ::std::move(from);
  }

  inline MapRequest& operator=(const MapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapRequest& operator=(MapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapRequest* internal_default_instance() {
    return reinterpret_cast<const MapRequest*>(
               &_MapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MapRequest& a, MapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapRequest& from) {
    MapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.MapRequest";
  }
  protected:
  explicit MapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardsFieldNumber = 5,
    kUserIdFieldNumber = 3,
    kOutputDirFieldNumber = 4,
    kShardIdFieldNumber = 1,
    kNOutputFieldNumber = 2,
  };
  // repeated .masterworker.ShardInfo shards = 5;
  int shards_size() const;
  private:
  int _internal_shards_size() const;
  public:
  void clear_shards();
  ::masterworker::ShardInfo* mutable_shards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >*
      mutable_shards();
  private:
  const ::masterworker::ShardInfo& _internal_shards(int index) const;
  ::masterworker::ShardInfo* _internal_add_shards();
  public:
  const ::masterworker::ShardInfo& shards(int index) const;
  ::masterworker::ShardInfo* add_shards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >&
      shards() const;

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string output_dir = 4;
  void clear_output_dir();
  const std::string& output_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_dir();
  PROTOBUF_NODISCARD std::string* release_output_dir();
  void set_allocated_output_dir(std::string* output_dir);
  private:
  const std::string& _internal_output_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_dir(const std::string& value);
  std::string* _internal_mutable_output_dir();
  public:

  // uint32 shard_id = 1;
  void clear_shard_id();
  uint32_t shard_id() const;
  void set_shard_id(uint32_t value);
  private:
  uint32_t _internal_shard_id() const;
  void _internal_set_shard_id(uint32_t value);
  public:

  // uint32 n_output = 2;
  void clear_n_output();
  uint32_t n_output() const;
  void set_n_output(uint32_t value);
  private:
  uint32_t _internal_n_output() const;
  void _internal_set_n_output(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.MapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo > shards_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_dir_;
    uint32_t shard_id_;
    uint32_t n_output_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class ShardInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ShardInfo) */ {
 public:
  inline ShardInfo() : ShardInfo(nullptr) {}
  ~ShardInfo() override;
  explicit PROTOBUF_CONSTEXPR ShardInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShardInfo(const ShardInfo& from);
  ShardInfo(ShardInfo&& from) noexcept
    : ShardInfo() {
    *this = ::std::move(from);
  }

  inline ShardInfo& operator=(const ShardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardInfo& operator=(ShardInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShardInfo* internal_default_instance() {
    return reinterpret_cast<const ShardInfo*>(
               &_ShardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ShardInfo& a, ShardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShardInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShardInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShardInfo& from) {
    ShardInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.ShardInfo";
  }
  protected:
  explicit ShardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileAddrFieldNumber = 1,
    kStartOffestFieldNumber = 2,
    kEndOffsetFieldNumber = 3,
  };
  // string file_addr = 1;
  void clear_file_addr();
  const std::string& file_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_addr();
  PROTOBUF_NODISCARD std::string* release_file_addr();
  void set_allocated_file_addr(std::string* file_addr);
  private:
  const std::string& _internal_file_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_addr(const std::string& value);
  std::string* _internal_mutable_file_addr();
  public:

  // uint32 start_offest = 2;
  void clear_start_offest();
  uint32_t start_offest() const;
  void set_start_offest(uint32_t value);
  private:
  uint32_t _internal_start_offest() const;
  void _internal_set_start_offest(uint32_t value);
  public:

  // uint32 end_offset = 3;
  void clear_end_offset();
  uint32_t end_offset() const;
  void set_end_offset(uint32_t value);
  private:
  uint32_t _internal_end_offset() const;
  void _internal_set_end_offset(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.ShardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_addr_;
    uint32_t start_offest_;
    uint32_t end_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class ReduceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ReduceRequest) */ {
 public:
  inline ReduceRequest() : ReduceRequest(nullptr) {}
  ~ReduceRequest() override;
  explicit PROTOBUF_CONSTEXPR ReduceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReduceRequest(const ReduceRequest& from);
  ReduceRequest(ReduceRequest&& from) noexcept
    : ReduceRequest() {
    *this = ::std::move(from);
  }

  inline ReduceRequest& operator=(const ReduceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReduceRequest& operator=(ReduceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReduceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReduceRequest* internal_default_instance() {
    return reinterpret_cast<const ReduceRequest*>(
               &_ReduceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReduceRequest& a, ReduceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReduceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReduceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReduceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReduceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReduceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReduceRequest& from) {
    ReduceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReduceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.ReduceRequest";
  }
  protected:
  explicit ReduceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntermediateFileAddressFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kOutputDirFieldNumber = 2,
    kReducerIdFieldNumber = 4,
  };
  // repeated string intermediate_file_address = 3;
  int intermediate_file_address_size() const;
  private:
  int _internal_intermediate_file_address_size() const;
  public:
  void clear_intermediate_file_address();
  const std::string& intermediate_file_address(int index) const;
  std::string* mutable_intermediate_file_address(int index);
  void set_intermediate_file_address(int index, const std::string& value);
  void set_intermediate_file_address(int index, std::string&& value);
  void set_intermediate_file_address(int index, const char* value);
  void set_intermediate_file_address(int index, const char* value, size_t size);
  std::string* add_intermediate_file_address();
  void add_intermediate_file_address(const std::string& value);
  void add_intermediate_file_address(std::string&& value);
  void add_intermediate_file_address(const char* value);
  void add_intermediate_file_address(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& intermediate_file_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_intermediate_file_address();
  private:
  const std::string& _internal_intermediate_file_address(int index) const;
  std::string* _internal_add_intermediate_file_address();
  public:

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string output_dir = 2;
  void clear_output_dir();
  const std::string& output_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_dir();
  PROTOBUF_NODISCARD std::string* release_output_dir();
  void set_allocated_output_dir(std::string* output_dir);
  private:
  const std::string& _internal_output_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_dir(const std::string& value);
  std::string* _internal_mutable_output_dir();
  public:

  // uint32 reducer_id = 4;
  void clear_reducer_id();
  uint32_t reducer_id() const;
  void set_reducer_id(uint32_t value);
  private:
  uint32_t _internal_reducer_id() const;
  void _internal_set_reducer_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.ReduceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> intermediate_file_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_dir_;
    uint32_t reducer_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapReply

// bool status = 1;
inline void MapReply::clear_status() {
  _impl_.status_ = false;
}
inline bool MapReply::_internal_status() const {
  return _impl_.status_;
}
inline bool MapReply::status() const {
  // @@protoc_insertion_point(field_get:masterworker.MapReply.status)
  return _internal_status();
}
inline void MapReply::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void MapReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:masterworker.MapReply.status)
}

// repeated string intermediate_file_location = 2;
inline int MapReply::_internal_intermediate_file_location_size() const {
  return _impl_.intermediate_file_location_.size();
}
inline int MapReply::intermediate_file_location_size() const {
  return _internal_intermediate_file_location_size();
}
inline void MapReply::clear_intermediate_file_location() {
  _impl_.intermediate_file_location_.Clear();
}
inline std::string* MapReply::add_intermediate_file_location() {
  std::string* _s = _internal_add_intermediate_file_location();
  // @@protoc_insertion_point(field_add_mutable:masterworker.MapReply.intermediate_file_location)
  return _s;
}
inline const std::string& MapReply::_internal_intermediate_file_location(int index) const {
  return _impl_.intermediate_file_location_.Get(index);
}
inline const std::string& MapReply::intermediate_file_location(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.MapReply.intermediate_file_location)
  return _internal_intermediate_file_location(index);
}
inline std::string* MapReply::mutable_intermediate_file_location(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.MapReply.intermediate_file_location)
  return _impl_.intermediate_file_location_.Mutable(index);
}
inline void MapReply::set_intermediate_file_location(int index, const std::string& value) {
  _impl_.intermediate_file_location_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:masterworker.MapReply.intermediate_file_location)
}
inline void MapReply::set_intermediate_file_location(int index, std::string&& value) {
  _impl_.intermediate_file_location_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:masterworker.MapReply.intermediate_file_location)
}
inline void MapReply::set_intermediate_file_location(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.intermediate_file_location_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterworker.MapReply.intermediate_file_location)
}
inline void MapReply::set_intermediate_file_location(int index, const char* value, size_t size) {
  _impl_.intermediate_file_location_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterworker.MapReply.intermediate_file_location)
}
inline std::string* MapReply::_internal_add_intermediate_file_location() {
  return _impl_.intermediate_file_location_.Add();
}
inline void MapReply::add_intermediate_file_location(const std::string& value) {
  _impl_.intermediate_file_location_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterworker.MapReply.intermediate_file_location)
}
inline void MapReply::add_intermediate_file_location(std::string&& value) {
  _impl_.intermediate_file_location_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:masterworker.MapReply.intermediate_file_location)
}
inline void MapReply::add_intermediate_file_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.intermediate_file_location_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterworker.MapReply.intermediate_file_location)
}
inline void MapReply::add_intermediate_file_location(const char* value, size_t size) {
  _impl_.intermediate_file_location_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterworker.MapReply.intermediate_file_location)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapReply::intermediate_file_location() const {
  // @@protoc_insertion_point(field_list:masterworker.MapReply.intermediate_file_location)
  return _impl_.intermediate_file_location_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapReply::mutable_intermediate_file_location() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.MapReply.intermediate_file_location)
  return &_impl_.intermediate_file_location_;
}

// -------------------------------------------------------------------

// ReduceReply

// bool status = 1;
inline void ReduceReply::clear_status() {
  _impl_.status_ = false;
}
inline bool ReduceReply::_internal_status() const {
  return _impl_.status_;
}
inline bool ReduceReply::status() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceReply.status)
  return _internal_status();
}
inline void ReduceReply::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void ReduceReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceReply.status)
}

// -------------------------------------------------------------------

// MapRequest

// uint32 shard_id = 1;
inline void MapRequest::clear_shard_id() {
  _impl_.shard_id_ = 0u;
}
inline uint32_t MapRequest::_internal_shard_id() const {
  return _impl_.shard_id_;
}
inline uint32_t MapRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:masterworker.MapRequest.shard_id)
  return _internal_shard_id();
}
inline void MapRequest::_internal_set_shard_id(uint32_t value) {
  
  _impl_.shard_id_ = value;
}
inline void MapRequest::set_shard_id(uint32_t value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:masterworker.MapRequest.shard_id)
}

// uint32 n_output = 2;
inline void MapRequest::clear_n_output() {
  _impl_.n_output_ = 0u;
}
inline uint32_t MapRequest::_internal_n_output() const {
  return _impl_.n_output_;
}
inline uint32_t MapRequest::n_output() const {
  // @@protoc_insertion_point(field_get:masterworker.MapRequest.n_output)
  return _internal_n_output();
}
inline void MapRequest::_internal_set_n_output(uint32_t value) {
  
  _impl_.n_output_ = value;
}
inline void MapRequest::set_n_output(uint32_t value) {
  _internal_set_n_output(value);
  // @@protoc_insertion_point(field_set:masterworker.MapRequest.n_output)
}

// string user_id = 3;
inline void MapRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& MapRequest::user_id() const {
  // @@protoc_insertion_point(field_get:masterworker.MapRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.MapRequest.user_id)
}
inline std::string* MapRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:masterworker.MapRequest.user_id)
  return _s;
}
inline const std::string& MapRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void MapRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MapRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MapRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:masterworker.MapRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void MapRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapRequest.user_id)
}

// string output_dir = 4;
inline void MapRequest::clear_output_dir() {
  _impl_.output_dir_.ClearToEmpty();
}
inline const std::string& MapRequest::output_dir() const {
  // @@protoc_insertion_point(field_get:masterworker.MapRequest.output_dir)
  return _internal_output_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapRequest::set_output_dir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.output_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.MapRequest.output_dir)
}
inline std::string* MapRequest::mutable_output_dir() {
  std::string* _s = _internal_mutable_output_dir();
  // @@protoc_insertion_point(field_mutable:masterworker.MapRequest.output_dir)
  return _s;
}
inline const std::string& MapRequest::_internal_output_dir() const {
  return _impl_.output_dir_.Get();
}
inline void MapRequest::_internal_set_output_dir(const std::string& value) {
  
  _impl_.output_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* MapRequest::_internal_mutable_output_dir() {
  
  return _impl_.output_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* MapRequest::release_output_dir() {
  // @@protoc_insertion_point(field_release:masterworker.MapRequest.output_dir)
  return _impl_.output_dir_.Release();
}
inline void MapRequest::set_allocated_output_dir(std::string* output_dir) {
  if (output_dir != nullptr) {
    
  } else {
    
  }
  _impl_.output_dir_.SetAllocated(output_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_dir_.IsDefault()) {
    _impl_.output_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapRequest.output_dir)
}

// repeated .masterworker.ShardInfo shards = 5;
inline int MapRequest::_internal_shards_size() const {
  return _impl_.shards_.size();
}
inline int MapRequest::shards_size() const {
  return _internal_shards_size();
}
inline void MapRequest::clear_shards() {
  _impl_.shards_.Clear();
}
inline ::masterworker::ShardInfo* MapRequest::mutable_shards(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.MapRequest.shards)
  return _impl_.shards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >*
MapRequest::mutable_shards() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.MapRequest.shards)
  return &_impl_.shards_;
}
inline const ::masterworker::ShardInfo& MapRequest::_internal_shards(int index) const {
  return _impl_.shards_.Get(index);
}
inline const ::masterworker::ShardInfo& MapRequest::shards(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.MapRequest.shards)
  return _internal_shards(index);
}
inline ::masterworker::ShardInfo* MapRequest::_internal_add_shards() {
  return _impl_.shards_.Add();
}
inline ::masterworker::ShardInfo* MapRequest::add_shards() {
  ::masterworker::ShardInfo* _add = _internal_add_shards();
  // @@protoc_insertion_point(field_add:masterworker.MapRequest.shards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >&
MapRequest::shards() const {
  // @@protoc_insertion_point(field_list:masterworker.MapRequest.shards)
  return _impl_.shards_;
}

// -------------------------------------------------------------------

// ShardInfo

// string file_addr = 1;
inline void ShardInfo::clear_file_addr() {
  _impl_.file_addr_.ClearToEmpty();
}
inline const std::string& ShardInfo::file_addr() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardInfo.file_addr)
  return _internal_file_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShardInfo::set_file_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.ShardInfo.file_addr)
}
inline std::string* ShardInfo::mutable_file_addr() {
  std::string* _s = _internal_mutable_file_addr();
  // @@protoc_insertion_point(field_mutable:masterworker.ShardInfo.file_addr)
  return _s;
}
inline const std::string& ShardInfo::_internal_file_addr() const {
  return _impl_.file_addr_.Get();
}
inline void ShardInfo::_internal_set_file_addr(const std::string& value) {
  
  _impl_.file_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* ShardInfo::_internal_mutable_file_addr() {
  
  return _impl_.file_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* ShardInfo::release_file_addr() {
  // @@protoc_insertion_point(field_release:masterworker.ShardInfo.file_addr)
  return _impl_.file_addr_.Release();
}
inline void ShardInfo::set_allocated_file_addr(std::string* file_addr) {
  if (file_addr != nullptr) {
    
  } else {
    
  }
  _impl_.file_addr_.SetAllocated(file_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_addr_.IsDefault()) {
    _impl_.file_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.ShardInfo.file_addr)
}

// uint32 start_offest = 2;
inline void ShardInfo::clear_start_offest() {
  _impl_.start_offest_ = 0u;
}
inline uint32_t ShardInfo::_internal_start_offest() const {
  return _impl_.start_offest_;
}
inline uint32_t ShardInfo::start_offest() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardInfo.start_offest)
  return _internal_start_offest();
}
inline void ShardInfo::_internal_set_start_offest(uint32_t value) {
  
  _impl_.start_offest_ = value;
}
inline void ShardInfo::set_start_offest(uint32_t value) {
  _internal_set_start_offest(value);
  // @@protoc_insertion_point(field_set:masterworker.ShardInfo.start_offest)
}

// uint32 end_offset = 3;
inline void ShardInfo::clear_end_offset() {
  _impl_.end_offset_ = 0u;
}
inline uint32_t ShardInfo::_internal_end_offset() const {
  return _impl_.end_offset_;
}
inline uint32_t ShardInfo::end_offset() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardInfo.end_offset)
  return _internal_end_offset();
}
inline void ShardInfo::_internal_set_end_offset(uint32_t value) {
  
  _impl_.end_offset_ = value;
}
inline void ShardInfo::set_end_offset(uint32_t value) {
  _internal_set_end_offset(value);
  // @@protoc_insertion_point(field_set:masterworker.ShardInfo.end_offset)
}

// -------------------------------------------------------------------

// ReduceRequest

// string user_id = 1;
inline void ReduceRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& ReduceRequest::user_id() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReduceRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.ReduceRequest.user_id)
}
inline std::string* ReduceRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceRequest.user_id)
  return _s;
}
inline const std::string& ReduceRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void ReduceRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReduceRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReduceRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:masterworker.ReduceRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void ReduceRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.ReduceRequest.user_id)
}

// string output_dir = 2;
inline void ReduceRequest::clear_output_dir() {
  _impl_.output_dir_.ClearToEmpty();
}
inline const std::string& ReduceRequest::output_dir() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceRequest.output_dir)
  return _internal_output_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReduceRequest::set_output_dir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.output_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.ReduceRequest.output_dir)
}
inline std::string* ReduceRequest::mutable_output_dir() {
  std::string* _s = _internal_mutable_output_dir();
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceRequest.output_dir)
  return _s;
}
inline const std::string& ReduceRequest::_internal_output_dir() const {
  return _impl_.output_dir_.Get();
}
inline void ReduceRequest::_internal_set_output_dir(const std::string& value) {
  
  _impl_.output_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* ReduceRequest::_internal_mutable_output_dir() {
  
  return _impl_.output_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* ReduceRequest::release_output_dir() {
  // @@protoc_insertion_point(field_release:masterworker.ReduceRequest.output_dir)
  return _impl_.output_dir_.Release();
}
inline void ReduceRequest::set_allocated_output_dir(std::string* output_dir) {
  if (output_dir != nullptr) {
    
  } else {
    
  }
  _impl_.output_dir_.SetAllocated(output_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_dir_.IsDefault()) {
    _impl_.output_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.ReduceRequest.output_dir)
}

// repeated string intermediate_file_address = 3;
inline int ReduceRequest::_internal_intermediate_file_address_size() const {
  return _impl_.intermediate_file_address_.size();
}
inline int ReduceRequest::intermediate_file_address_size() const {
  return _internal_intermediate_file_address_size();
}
inline void ReduceRequest::clear_intermediate_file_address() {
  _impl_.intermediate_file_address_.Clear();
}
inline std::string* ReduceRequest::add_intermediate_file_address() {
  std::string* _s = _internal_add_intermediate_file_address();
  // @@protoc_insertion_point(field_add_mutable:masterworker.ReduceRequest.intermediate_file_address)
  return _s;
}
inline const std::string& ReduceRequest::_internal_intermediate_file_address(int index) const {
  return _impl_.intermediate_file_address_.Get(index);
}
inline const std::string& ReduceRequest::intermediate_file_address(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceRequest.intermediate_file_address)
  return _internal_intermediate_file_address(index);
}
inline std::string* ReduceRequest::mutable_intermediate_file_address(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceRequest.intermediate_file_address)
  return _impl_.intermediate_file_address_.Mutable(index);
}
inline void ReduceRequest::set_intermediate_file_address(int index, const std::string& value) {
  _impl_.intermediate_file_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceRequest.intermediate_file_address)
}
inline void ReduceRequest::set_intermediate_file_address(int index, std::string&& value) {
  _impl_.intermediate_file_address_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:masterworker.ReduceRequest.intermediate_file_address)
}
inline void ReduceRequest::set_intermediate_file_address(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.intermediate_file_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterworker.ReduceRequest.intermediate_file_address)
}
inline void ReduceRequest::set_intermediate_file_address(int index, const char* value, size_t size) {
  _impl_.intermediate_file_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterworker.ReduceRequest.intermediate_file_address)
}
inline std::string* ReduceRequest::_internal_add_intermediate_file_address() {
  return _impl_.intermediate_file_address_.Add();
}
inline void ReduceRequest::add_intermediate_file_address(const std::string& value) {
  _impl_.intermediate_file_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterworker.ReduceRequest.intermediate_file_address)
}
inline void ReduceRequest::add_intermediate_file_address(std::string&& value) {
  _impl_.intermediate_file_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:masterworker.ReduceRequest.intermediate_file_address)
}
inline void ReduceRequest::add_intermediate_file_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.intermediate_file_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterworker.ReduceRequest.intermediate_file_address)
}
inline void ReduceRequest::add_intermediate_file_address(const char* value, size_t size) {
  _impl_.intermediate_file_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterworker.ReduceRequest.intermediate_file_address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReduceRequest::intermediate_file_address() const {
  // @@protoc_insertion_point(field_list:masterworker.ReduceRequest.intermediate_file_address)
  return _impl_.intermediate_file_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReduceRequest::mutable_intermediate_file_address() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.ReduceRequest.intermediate_file_address)
  return &_impl_.intermediate_file_address_;
}

// uint32 reducer_id = 4;
inline void ReduceRequest::clear_reducer_id() {
  _impl_.reducer_id_ = 0u;
}
inline uint32_t ReduceRequest::_internal_reducer_id() const {
  return _impl_.reducer_id_;
}
inline uint32_t ReduceRequest::reducer_id() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceRequest.reducer_id)
  return _internal_reducer_id();
}
inline void ReduceRequest::_internal_set_reducer_id(uint32_t value) {
  
  _impl_.reducer_id_ = value;
}
inline void ReduceRequest::set_reducer_id(uint32_t value) {
  _internal_set_reducer_id(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceRequest.reducer_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace masterworker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
