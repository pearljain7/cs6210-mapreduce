// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_masterworker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_masterworker_2eproto;
namespace masterworker {
class MasterQuery;
class MasterQueryDefaultTypeInternal;
extern MasterQueryDefaultTypeInternal _MasterQuery_default_instance_;
class ShardInfo;
class ShardInfoDefaultTypeInternal;
extern ShardInfoDefaultTypeInternal _ShardInfo_default_instance_;
class TempFiles;
class TempFilesDefaultTypeInternal;
extern TempFilesDefaultTypeInternal _TempFiles_default_instance_;
class WorkerReply;
class WorkerReplyDefaultTypeInternal;
extern WorkerReplyDefaultTypeInternal _WorkerReply_default_instance_;
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> ::masterworker::MasterQuery* Arena::CreateMaybeMessage<::masterworker::MasterQuery>(Arena*);
template<> ::masterworker::ShardInfo* Arena::CreateMaybeMessage<::masterworker::ShardInfo>(Arena*);
template<> ::masterworker::TempFiles* Arena::CreateMaybeMessage<::masterworker::TempFiles>(Arena*);
template<> ::masterworker::WorkerReply* Arena::CreateMaybeMessage<::masterworker::WorkerReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace masterworker {

// ===================================================================

class WorkerReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.WorkerReply) */ {
 public:
  inline WorkerReply() : WorkerReply(nullptr) {}
  virtual ~WorkerReply();

  WorkerReply(const WorkerReply& from);
  WorkerReply(WorkerReply&& from) noexcept
    : WorkerReply() {
    *this = ::std::move(from);
  }

  inline WorkerReply& operator=(const WorkerReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerReply& operator=(WorkerReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerReply& default_instance();

  static inline const WorkerReply* internal_default_instance() {
    return reinterpret_cast<const WorkerReply*>(
               &_WorkerReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkerReply& a, WorkerReply& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerReply* New() const final {
    return CreateMaybeMessage<WorkerReply>(nullptr);
  }

  WorkerReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerReply& from);
  void MergeFrom(const WorkerReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.WorkerReply";
  }
  protected:
  explicit WorkerReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempFilesFieldNumber = 1,
    kIsDoneFieldNumber = 2,
  };
  // repeated .masterworker.TempFiles temp_files = 1;
  int temp_files_size() const;
  private:
  int _internal_temp_files_size() const;
  public:
  void clear_temp_files();
  ::masterworker::TempFiles* mutable_temp_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::TempFiles >*
      mutable_temp_files();
  private:
  const ::masterworker::TempFiles& _internal_temp_files(int index) const;
  ::masterworker::TempFiles* _internal_add_temp_files();
  public:
  const ::masterworker::TempFiles& temp_files(int index) const;
  ::masterworker::TempFiles* add_temp_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::TempFiles >&
      temp_files() const;

  // bool is_done = 2;
  void clear_is_done();
  bool is_done() const;
  void set_is_done(bool value);
  private:
  bool _internal_is_done() const;
  void _internal_set_is_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.WorkerReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::TempFiles > temp_files_;
  bool is_done_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class TempFiles PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.TempFiles) */ {
 public:
  inline TempFiles() : TempFiles(nullptr) {}
  virtual ~TempFiles();

  TempFiles(const TempFiles& from);
  TempFiles(TempFiles&& from) noexcept
    : TempFiles() {
    *this = ::std::move(from);
  }

  inline TempFiles& operator=(const TempFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline TempFiles& operator=(TempFiles&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TempFiles& default_instance();

  static inline const TempFiles* internal_default_instance() {
    return reinterpret_cast<const TempFiles*>(
               &_TempFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TempFiles& a, TempFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(TempFiles* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TempFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TempFiles* New() const final {
    return CreateMaybeMessage<TempFiles>(nullptr);
  }

  TempFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TempFiles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TempFiles& from);
  void MergeFrom(const TempFiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TempFiles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.TempFiles";
  }
  protected:
  explicit TempFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:masterworker.TempFiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class MasterQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MasterQuery) */ {
 public:
  inline MasterQuery() : MasterQuery(nullptr) {}
  virtual ~MasterQuery();

  MasterQuery(const MasterQuery& from);
  MasterQuery(MasterQuery&& from) noexcept
    : MasterQuery() {
    *this = ::std::move(from);
  }

  inline MasterQuery& operator=(const MasterQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline MasterQuery& operator=(MasterQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MasterQuery& default_instance();

  static inline const MasterQuery* internal_default_instance() {
    return reinterpret_cast<const MasterQuery*>(
               &_MasterQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MasterQuery& a, MasterQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(MasterQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MasterQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MasterQuery* New() const final {
    return CreateMaybeMessage<MasterQuery>(nullptr);
  }

  MasterQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MasterQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MasterQuery& from);
  void MergeFrom(const MasterQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.MasterQuery";
  }
  protected:
  explicit MasterQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardFieldNumber = 1,
    kLocationFieldNumber = 3,
    kUserIdFieldNumber = 5,
    kOutputNumFieldNumber = 2,
    kIsMapFieldNumber = 4,
  };
  // repeated .masterworker.ShardInfo shard = 1;
  int shard_size() const;
  private:
  int _internal_shard_size() const;
  public:
  void clear_shard();
  ::masterworker::ShardInfo* mutable_shard(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >*
      mutable_shard();
  private:
  const ::masterworker::ShardInfo& _internal_shard(int index) const;
  ::masterworker::ShardInfo* _internal_add_shard();
  public:
  const ::masterworker::ShardInfo& shard(int index) const;
  ::masterworker::ShardInfo* add_shard();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >&
      shard() const;

  // string location = 3;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string user_id = 5;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int32 output_num = 2;
  void clear_output_num();
  ::PROTOBUF_NAMESPACE_ID::int32 output_num() const;
  void set_output_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_num() const;
  void _internal_set_output_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_map = 4;
  void clear_is_map();
  bool is_map() const;
  void set_is_map(bool value);
  private:
  bool _internal_is_map() const;
  void _internal_set_is_map(bool value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.MasterQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo > shard_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_num_;
  bool is_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class ShardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ShardInfo) */ {
 public:
  inline ShardInfo() : ShardInfo(nullptr) {}
  virtual ~ShardInfo();

  ShardInfo(const ShardInfo& from);
  ShardInfo(ShardInfo&& from) noexcept
    : ShardInfo() {
    *this = ::std::move(from);
  }

  inline ShardInfo& operator=(const ShardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardInfo& operator=(ShardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardInfo& default_instance();

  static inline const ShardInfo* internal_default_instance() {
    return reinterpret_cast<const ShardInfo*>(
               &_ShardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ShardInfo& a, ShardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardInfo* New() const final {
    return CreateMaybeMessage<ShardInfo>(nullptr);
  }

  ShardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardInfo& from);
  void MergeFrom(const ShardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.ShardInfo";
  }
  protected:
  explicit ShardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kOffStartFieldNumber = 2,
    kOffEndFieldNumber = 3,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // int32 off_start = 2;
  void clear_off_start();
  ::PROTOBUF_NAMESPACE_ID::int32 off_start() const;
  void set_off_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_off_start() const;
  void _internal_set_off_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 off_end = 3;
  void clear_off_end();
  ::PROTOBUF_NAMESPACE_ID::int32 off_end() const;
  void set_off_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_off_end() const;
  void _internal_set_off_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.ShardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::int32 off_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 off_end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkerReply

// repeated .masterworker.TempFiles temp_files = 1;
inline int WorkerReply::_internal_temp_files_size() const {
  return temp_files_.size();
}
inline int WorkerReply::temp_files_size() const {
  return _internal_temp_files_size();
}
inline void WorkerReply::clear_temp_files() {
  temp_files_.Clear();
}
inline ::masterworker::TempFiles* WorkerReply::mutable_temp_files(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.WorkerReply.temp_files)
  return temp_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::TempFiles >*
WorkerReply::mutable_temp_files() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.WorkerReply.temp_files)
  return &temp_files_;
}
inline const ::masterworker::TempFiles& WorkerReply::_internal_temp_files(int index) const {
  return temp_files_.Get(index);
}
inline const ::masterworker::TempFiles& WorkerReply::temp_files(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.WorkerReply.temp_files)
  return _internal_temp_files(index);
}
inline ::masterworker::TempFiles* WorkerReply::_internal_add_temp_files() {
  return temp_files_.Add();
}
inline ::masterworker::TempFiles* WorkerReply::add_temp_files() {
  // @@protoc_insertion_point(field_add:masterworker.WorkerReply.temp_files)
  return _internal_add_temp_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::TempFiles >&
WorkerReply::temp_files() const {
  // @@protoc_insertion_point(field_list:masterworker.WorkerReply.temp_files)
  return temp_files_;
}

// bool is_done = 2;
inline void WorkerReply::clear_is_done() {
  is_done_ = false;
}
inline bool WorkerReply::_internal_is_done() const {
  return is_done_;
}
inline bool WorkerReply::is_done() const {
  // @@protoc_insertion_point(field_get:masterworker.WorkerReply.is_done)
  return _internal_is_done();
}
inline void WorkerReply::_internal_set_is_done(bool value) {
  
  is_done_ = value;
}
inline void WorkerReply::set_is_done(bool value) {
  _internal_set_is_done(value);
  // @@protoc_insertion_point(field_set:masterworker.WorkerReply.is_done)
}

// -------------------------------------------------------------------

// TempFiles

// string filename = 1;
inline void TempFiles::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& TempFiles::filename() const {
  // @@protoc_insertion_point(field_get:masterworker.TempFiles.filename)
  return _internal_filename();
}
inline void TempFiles::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:masterworker.TempFiles.filename)
}
inline std::string* TempFiles::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:masterworker.TempFiles.filename)
  return _internal_mutable_filename();
}
inline const std::string& TempFiles::_internal_filename() const {
  return filename_.Get();
}
inline void TempFiles::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TempFiles::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.TempFiles.filename)
}
inline void TempFiles::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.TempFiles.filename)
}
inline void TempFiles::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.TempFiles.filename)
}
inline std::string* TempFiles::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TempFiles::release_filename() {
  // @@protoc_insertion_point(field_release:masterworker.TempFiles.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TempFiles::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.TempFiles.filename)
}

// -------------------------------------------------------------------

// MasterQuery

// repeated .masterworker.ShardInfo shard = 1;
inline int MasterQuery::_internal_shard_size() const {
  return shard_.size();
}
inline int MasterQuery::shard_size() const {
  return _internal_shard_size();
}
inline void MasterQuery::clear_shard() {
  shard_.Clear();
}
inline ::masterworker::ShardInfo* MasterQuery::mutable_shard(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.MasterQuery.shard)
  return shard_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >*
MasterQuery::mutable_shard() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.MasterQuery.shard)
  return &shard_;
}
inline const ::masterworker::ShardInfo& MasterQuery::_internal_shard(int index) const {
  return shard_.Get(index);
}
inline const ::masterworker::ShardInfo& MasterQuery::shard(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.MasterQuery.shard)
  return _internal_shard(index);
}
inline ::masterworker::ShardInfo* MasterQuery::_internal_add_shard() {
  return shard_.Add();
}
inline ::masterworker::ShardInfo* MasterQuery::add_shard() {
  // @@protoc_insertion_point(field_add:masterworker.MasterQuery.shard)
  return _internal_add_shard();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >&
MasterQuery::shard() const {
  // @@protoc_insertion_point(field_list:masterworker.MasterQuery.shard)
  return shard_;
}

// int32 output_num = 2;
inline void MasterQuery::clear_output_num() {
  output_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MasterQuery::_internal_output_num() const {
  return output_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MasterQuery::output_num() const {
  // @@protoc_insertion_point(field_get:masterworker.MasterQuery.output_num)
  return _internal_output_num();
}
inline void MasterQuery::_internal_set_output_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  output_num_ = value;
}
inline void MasterQuery::set_output_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output_num(value);
  // @@protoc_insertion_point(field_set:masterworker.MasterQuery.output_num)
}

// string location = 3;
inline void MasterQuery::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& MasterQuery::location() const {
  // @@protoc_insertion_point(field_get:masterworker.MasterQuery.location)
  return _internal_location();
}
inline void MasterQuery::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:masterworker.MasterQuery.location)
}
inline std::string* MasterQuery::mutable_location() {
  // @@protoc_insertion_point(field_mutable:masterworker.MasterQuery.location)
  return _internal_mutable_location();
}
inline const std::string& MasterQuery::_internal_location() const {
  return location_.Get();
}
inline void MasterQuery::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MasterQuery::set_location(std::string&& value) {
  
  location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.MasterQuery.location)
}
inline void MasterQuery::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.MasterQuery.location)
}
inline void MasterQuery::set_location(const char* value,
    size_t size) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.MasterQuery.location)
}
inline std::string* MasterQuery::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MasterQuery::release_location() {
  // @@protoc_insertion_point(field_release:masterworker.MasterQuery.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MasterQuery::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.MasterQuery.location)
}

// bool is_map = 4;
inline void MasterQuery::clear_is_map() {
  is_map_ = false;
}
inline bool MasterQuery::_internal_is_map() const {
  return is_map_;
}
inline bool MasterQuery::is_map() const {
  // @@protoc_insertion_point(field_get:masterworker.MasterQuery.is_map)
  return _internal_is_map();
}
inline void MasterQuery::_internal_set_is_map(bool value) {
  
  is_map_ = value;
}
inline void MasterQuery::set_is_map(bool value) {
  _internal_set_is_map(value);
  // @@protoc_insertion_point(field_set:masterworker.MasterQuery.is_map)
}

// string user_id = 5;
inline void MasterQuery::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& MasterQuery::user_id() const {
  // @@protoc_insertion_point(field_get:masterworker.MasterQuery.user_id)
  return _internal_user_id();
}
inline void MasterQuery::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:masterworker.MasterQuery.user_id)
}
inline std::string* MasterQuery::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:masterworker.MasterQuery.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& MasterQuery::_internal_user_id() const {
  return user_id_.Get();
}
inline void MasterQuery::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MasterQuery::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.MasterQuery.user_id)
}
inline void MasterQuery::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.MasterQuery.user_id)
}
inline void MasterQuery::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.MasterQuery.user_id)
}
inline std::string* MasterQuery::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MasterQuery::release_user_id() {
  // @@protoc_insertion_point(field_release:masterworker.MasterQuery.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MasterQuery::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.MasterQuery.user_id)
}

// -------------------------------------------------------------------

// ShardInfo

// string filename = 1;
inline void ShardInfo::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& ShardInfo::filename() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardInfo.filename)
  return _internal_filename();
}
inline void ShardInfo::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:masterworker.ShardInfo.filename)
}
inline std::string* ShardInfo::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:masterworker.ShardInfo.filename)
  return _internal_mutable_filename();
}
inline const std::string& ShardInfo::_internal_filename() const {
  return filename_.Get();
}
inline void ShardInfo::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShardInfo::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.ShardInfo.filename)
}
inline void ShardInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.ShardInfo.filename)
}
inline void ShardInfo::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.ShardInfo.filename)
}
inline std::string* ShardInfo::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShardInfo::release_filename() {
  // @@protoc_insertion_point(field_release:masterworker.ShardInfo.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.ShardInfo.filename)
}

// int32 off_start = 2;
inline void ShardInfo::clear_off_start() {
  off_start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardInfo::_internal_off_start() const {
  return off_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardInfo::off_start() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardInfo.off_start)
  return _internal_off_start();
}
inline void ShardInfo::_internal_set_off_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  off_start_ = value;
}
inline void ShardInfo::set_off_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_off_start(value);
  // @@protoc_insertion_point(field_set:masterworker.ShardInfo.off_start)
}

// int32 off_end = 3;
inline void ShardInfo::clear_off_end() {
  off_end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardInfo::_internal_off_end() const {
  return off_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardInfo::off_end() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardInfo.off_end)
  return _internal_off_end();
}
inline void ShardInfo::_internal_set_off_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  off_end_ = value;
}
inline void ShardInfo::set_off_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_off_end(value);
  // @@protoc_insertion_point(field_set:masterworker.ShardInfo.off_end)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace masterworker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
