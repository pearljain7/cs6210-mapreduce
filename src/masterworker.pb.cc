// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#include "masterworker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShardInfo_masterworker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TempFiles_masterworker_2eproto;
namespace masterworker {
class WorkerReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerReply> _instance;
} _WorkerReply_default_instance_;
class TempFilesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TempFiles> _instance;
} _TempFiles_default_instance_;
class MasterQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MasterQuery> _instance;
} _MasterQuery_default_instance_;
class ShardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShardInfo> _instance;
} _ShardInfo_default_instance_;
}  // namespace masterworker
static void InitDefaultsscc_info_MasterQuery_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_MasterQuery_default_instance_;
    new (ptr) ::masterworker::MasterQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MasterQuery_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MasterQuery_masterworker_2eproto}, {
      &scc_info_ShardInfo_masterworker_2eproto.base,}};

static void InitDefaultsscc_info_ShardInfo_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_ShardInfo_default_instance_;
    new (ptr) ::masterworker::ShardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShardInfo_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShardInfo_masterworker_2eproto}, {}};

static void InitDefaultsscc_info_TempFiles_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_TempFiles_default_instance_;
    new (ptr) ::masterworker::TempFiles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TempFiles_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TempFiles_masterworker_2eproto}, {}};

static void InitDefaultsscc_info_WorkerReply_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_WorkerReply_default_instance_;
    new (ptr) ::masterworker::WorkerReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkerReply_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkerReply_masterworker_2eproto}, {
      &scc_info_TempFiles_masterworker_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_masterworker_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_masterworker_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_masterworker_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_masterworker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::WorkerReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::WorkerReply, temp_files_),
  PROTOBUF_FIELD_OFFSET(::masterworker::WorkerReply, is_done_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::TempFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::TempFiles, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::MasterQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::MasterQuery, shard_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MasterQuery, output_num_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MasterQuery, location_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MasterQuery, is_map_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MasterQuery, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, filename_),
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, off_start_),
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, off_end_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::masterworker::WorkerReply)},
  { 7, -1, sizeof(::masterworker::TempFiles)},
  { 13, -1, sizeof(::masterworker::MasterQuery)},
  { 23, -1, sizeof(::masterworker::ShardInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_WorkerReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_TempFiles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_MasterQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_ShardInfo_default_instance_),
};

const char descriptor_table_protodef_masterworker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022masterworker.proto\022\014masterworker\"K\n\013Wo"
  "rkerReply\022+\n\ntemp_files\030\001 \003(\0132\027.masterwo"
  "rker.TempFiles\022\017\n\007is_done\030\002 \001(\010\"\035\n\tTempF"
  "iles\022\020\n\010filename\030\001 \001(\t\"|\n\013MasterQuery\022&\n"
  "\005shard\030\001 \003(\0132\027.masterworker.ShardInfo\022\022\n"
  "\noutput_num\030\002 \001(\005\022\020\n\010location\030\003 \001(\t\022\016\n\006i"
  "s_map\030\004 \001(\010\022\017\n\007user_id\030\005 \001(\t\"A\n\tShardInf"
  "o\022\020\n\010filename\030\001 \001(\t\022\021\n\toff_start\030\002 \001(\005\022\017"
  "\n\007off_end\030\003 \001(\0052S\n\014MasterWorker\022C\n\tmapRe"
  "duce\022\031.masterworker.MasterQuery\032\031.master"
  "worker.WorkerReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_masterworker_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_masterworker_2eproto_sccs[4] = {
  &scc_info_MasterQuery_masterworker_2eproto.base,
  &scc_info_ShardInfo_masterworker_2eproto.base,
  &scc_info_TempFiles_masterworker_2eproto.base,
  &scc_info_WorkerReply_masterworker_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_masterworker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_masterworker_2eproto = {
  false, false, descriptor_table_protodef_masterworker_2eproto, "masterworker.proto", 428,
  &descriptor_table_masterworker_2eproto_once, descriptor_table_masterworker_2eproto_sccs, descriptor_table_masterworker_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_masterworker_2eproto::offsets,
  file_level_metadata_masterworker_2eproto, 4, file_level_enum_descriptors_masterworker_2eproto, file_level_service_descriptors_masterworker_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_masterworker_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_masterworker_2eproto)), true);
namespace masterworker {

// ===================================================================

class WorkerReply::_Internal {
 public:
};

WorkerReply::WorkerReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  temp_files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.WorkerReply)
}
WorkerReply::WorkerReply(const WorkerReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      temp_files_(from.temp_files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_done_ = from.is_done_;
  // @@protoc_insertion_point(copy_constructor:masterworker.WorkerReply)
}

void WorkerReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkerReply_masterworker_2eproto.base);
  is_done_ = false;
}

WorkerReply::~WorkerReply() {
  // @@protoc_insertion_point(destructor:masterworker.WorkerReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkerReply::ArenaDtor(void* object) {
  WorkerReply* _this = reinterpret_cast< WorkerReply* >(object);
  (void)_this;
}
void WorkerReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerReply& WorkerReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerReply_masterworker_2eproto.base);
  return *internal_default_instance();
}


void WorkerReply::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.WorkerReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temp_files_.Clear();
  is_done_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .masterworker.TempFiles temp_files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_temp_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_done = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.WorkerReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .masterworker.TempFiles temp_files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_temp_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_temp_files(i), target, stream);
  }

  // bool is_done = 2;
  if (this->is_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_done(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.WorkerReply)
  return target;
}

size_t WorkerReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.WorkerReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .masterworker.TempFiles temp_files = 1;
  total_size += 1UL * this->_internal_temp_files_size();
  for (const auto& msg : this->temp_files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool is_done = 2;
  if (this->is_done() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.WorkerReply)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.WorkerReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.WorkerReply)
    MergeFrom(*source);
  }
}

void WorkerReply::MergeFrom(const WorkerReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.WorkerReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  temp_files_.MergeFrom(from.temp_files_);
  if (from.is_done() != 0) {
    _internal_set_is_done(from._internal_is_done());
  }
}

void WorkerReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.WorkerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerReply::CopyFrom(const WorkerReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.WorkerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerReply::IsInitialized() const {
  return true;
}

void WorkerReply::InternalSwap(WorkerReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  temp_files_.InternalSwap(&other->temp_files_);
  swap(is_done_, other->is_done_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TempFiles::_Internal {
 public:
};

TempFiles::TempFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.TempFiles)
}
TempFiles::TempFiles(const TempFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.TempFiles)
}

void TempFiles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TempFiles_masterworker_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TempFiles::~TempFiles() {
  // @@protoc_insertion_point(destructor:masterworker.TempFiles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TempFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TempFiles::ArenaDtor(void* object) {
  TempFiles* _this = reinterpret_cast< TempFiles* >(object);
  (void)_this;
}
void TempFiles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TempFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TempFiles& TempFiles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TempFiles_masterworker_2eproto.base);
  return *internal_default_instance();
}


void TempFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.TempFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TempFiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.TempFiles.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TempFiles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.TempFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.TempFiles.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.TempFiles)
  return target;
}

size_t TempFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.TempFiles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TempFiles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.TempFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const TempFiles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TempFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.TempFiles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.TempFiles)
    MergeFrom(*source);
  }
}

void TempFiles::MergeFrom(const TempFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.TempFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
}

void TempFiles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.TempFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempFiles::CopyFrom(const TempFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.TempFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempFiles::IsInitialized() const {
  return true;
}

void TempFiles::InternalSwap(TempFiles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TempFiles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MasterQuery::_Internal {
 public:
};

MasterQuery::MasterQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shard_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.MasterQuery)
}
MasterQuery::MasterQuery(const MasterQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shard_(from.shard_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  ::memcpy(&output_num_, &from.output_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_map_) -
    reinterpret_cast<char*>(&output_num_)) + sizeof(is_map_));
  // @@protoc_insertion_point(copy_constructor:masterworker.MasterQuery)
}

void MasterQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MasterQuery_masterworker_2eproto.base);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&output_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_map_) -
      reinterpret_cast<char*>(&output_num_)) + sizeof(is_map_));
}

MasterQuery::~MasterQuery() {
  // @@protoc_insertion_point(destructor:masterworker.MasterQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MasterQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MasterQuery::ArenaDtor(void* object) {
  MasterQuery* _this = reinterpret_cast< MasterQuery* >(object);
  (void)_this;
}
void MasterQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MasterQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MasterQuery& MasterQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MasterQuery_masterworker_2eproto.base);
  return *internal_default_instance();
}


void MasterQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.MasterQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shard_.Clear();
  location_.ClearToEmpty();
  user_id_.ClearToEmpty();
  ::memset(&output_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_map_) -
      reinterpret_cast<char*>(&output_num_)) + sizeof(is_map_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MasterQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .masterworker.ShardInfo shard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shard(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 output_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          output_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.MasterQuery.location"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.MasterQuery.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MasterQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.MasterQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .masterworker.ShardInfo shard = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shard_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_shard(i), target, stream);
  }

  // int32 output_num = 2;
  if (this->output_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_output_num(), target);
  }

  // string location = 3;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.MasterQuery.location");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_location(), target);
  }

  // bool is_map = 4;
  if (this->is_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_map(), target);
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.MasterQuery.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.MasterQuery)
  return target;
}

size_t MasterQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.MasterQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .masterworker.ShardInfo shard = 1;
  total_size += 1UL * this->_internal_shard_size();
  for (const auto& msg : this->shard_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string location = 3;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // int32 output_num = 2;
  if (this->output_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_output_num());
  }

  // bool is_map = 4;
  if (this->is_map() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.MasterQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MasterQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.MasterQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.MasterQuery)
    MergeFrom(*source);
  }
}

void MasterQuery::MergeFrom(const MasterQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.MasterQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shard_.MergeFrom(from.shard_);
  if (from.location().size() > 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.output_num() != 0) {
    _internal_set_output_num(from._internal_output_num());
  }
  if (from.is_map() != 0) {
    _internal_set_is_map(from._internal_is_map());
  }
}

void MasterQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.MasterQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterQuery::CopyFrom(const MasterQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.MasterQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterQuery::IsInitialized() const {
  return true;
}

void MasterQuery::InternalSwap(MasterQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shard_.InternalSwap(&other->shard_);
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MasterQuery, is_map_)
      + sizeof(MasterQuery::is_map_)
      - PROTOBUF_FIELD_OFFSET(MasterQuery, output_num_)>(
          reinterpret_cast<char*>(&output_num_),
          reinterpret_cast<char*>(&other->output_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShardInfo::_Internal {
 public:
};

ShardInfo::ShardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.ShardInfo)
}
ShardInfo::ShardInfo(const ShardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  ::memcpy(&off_start_, &from.off_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&off_end_) -
    reinterpret_cast<char*>(&off_start_)) + sizeof(off_end_));
  // @@protoc_insertion_point(copy_constructor:masterworker.ShardInfo)
}

void ShardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShardInfo_masterworker_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&off_start_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&off_end_) -
      reinterpret_cast<char*>(&off_start_)) + sizeof(off_end_));
}

ShardInfo::~ShardInfo() {
  // @@protoc_insertion_point(destructor:masterworker.ShardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShardInfo::ArenaDtor(void* object) {
  ShardInfo* _this = reinterpret_cast< ShardInfo* >(object);
  (void)_this;
}
void ShardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShardInfo& ShardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShardInfo_masterworker_2eproto.base);
  return *internal_default_instance();
}


void ShardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.ShardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  ::memset(&off_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&off_end_) -
      reinterpret_cast<char*>(&off_start_)) + sizeof(off_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.ShardInfo.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 off_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          off_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 off_end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          off_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.ShardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.ShardInfo.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // int32 off_start = 2;
  if (this->off_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_off_start(), target);
  }

  // int32 off_end = 3;
  if (this->off_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_off_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.ShardInfo)
  return target;
}

size_t ShardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.ShardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // int32 off_start = 2;
  if (this->off_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_off_start());
  }

  // int32 off_end = 3;
  if (this->off_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_off_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.ShardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.ShardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.ShardInfo)
    MergeFrom(*source);
  }
}

void ShardInfo::MergeFrom(const ShardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.ShardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.off_start() != 0) {
    _internal_set_off_start(from._internal_off_start());
  }
  if (from.off_end() != 0) {
    _internal_set_off_end(from._internal_off_end());
  }
}

void ShardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.ShardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardInfo::CopyFrom(const ShardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.ShardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfo::IsInitialized() const {
  return true;
}

void ShardInfo::InternalSwap(ShardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardInfo, off_end_)
      + sizeof(ShardInfo::off_end_)
      - PROTOBUF_FIELD_OFFSET(ShardInfo, off_start_)>(
          reinterpret_cast<char*>(&off_start_),
          reinterpret_cast<char*>(&other->off_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::masterworker::WorkerReply* Arena::CreateMaybeMessage< ::masterworker::WorkerReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::WorkerReply >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::TempFiles* Arena::CreateMaybeMessage< ::masterworker::TempFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::TempFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::MasterQuery* Arena::CreateMaybeMessage< ::masterworker::MasterQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::MasterQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::ShardInfo* Arena::CreateMaybeMessage< ::masterworker::ShardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::ShardInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
