// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#include "masterworker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace masterworker {
PROTOBUF_CONSTEXPR MapReply::MapReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.intermediate_file_location_)*/{}
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapReplyDefaultTypeInternal() {}
  union {
    MapReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapReplyDefaultTypeInternal _MapReply_default_instance_;
PROTOBUF_CONSTEXPR ReduceReply::ReduceReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReduceReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReduceReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReduceReplyDefaultTypeInternal() {}
  union {
    ReduceReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReduceReplyDefaultTypeInternal _ReduceReply_default_instance_;
PROTOBUF_CONSTEXPR MapRequest::MapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shards_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shard_id_)*/0u
  , /*decltype(_impl_.n_output_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapRequestDefaultTypeInternal() {}
  union {
    MapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapRequestDefaultTypeInternal _MapRequest_default_instance_;
PROTOBUF_CONSTEXPR ShardInfo::ShardInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_offest_)*/0u
  , /*decltype(_impl_.end_offset_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardInfoDefaultTypeInternal() {}
  union {
    ShardInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardInfoDefaultTypeInternal _ShardInfo_default_instance_;
PROTOBUF_CONSTEXPR ReduceRequest::ReduceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.intermediate_file_address_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reducer_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReduceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReduceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReduceRequestDefaultTypeInternal() {}
  union {
    ReduceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReduceRequestDefaultTypeInternal _ReduceRequest_default_instance_;
}  // namespace masterworker
static ::_pb::Metadata file_level_metadata_masterworker_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_masterworker_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_masterworker_2eproto = nullptr;

const uint32_t TableStruct_masterworker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::MapReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::masterworker::MapReply, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MapReply, _impl_.intermediate_file_location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::ReduceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::masterworker::ReduceReply, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::MapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::masterworker::MapRequest, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MapRequest, _impl_.n_output_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MapRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MapRequest, _impl_.output_dir_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MapRequest, _impl_.shards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, _impl_.file_addr_),
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, _impl_.start_offest_),
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, _impl_.end_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::ReduceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::masterworker::ReduceRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::masterworker::ReduceRequest, _impl_.output_dir_),
  PROTOBUF_FIELD_OFFSET(::masterworker::ReduceRequest, _impl_.intermediate_file_address_),
  PROTOBUF_FIELD_OFFSET(::masterworker::ReduceRequest, _impl_.reducer_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::masterworker::MapReply)},
  { 8, -1, -1, sizeof(::masterworker::ReduceReply)},
  { 15, -1, -1, sizeof(::masterworker::MapRequest)},
  { 26, -1, -1, sizeof(::masterworker::ShardInfo)},
  { 35, -1, -1, sizeof(::masterworker::ReduceRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::masterworker::_MapReply_default_instance_._instance,
  &::masterworker::_ReduceReply_default_instance_._instance,
  &::masterworker::_MapRequest_default_instance_._instance,
  &::masterworker::_ShardInfo_default_instance_._instance,
  &::masterworker::_ReduceRequest_default_instance_._instance,
};

const char descriptor_table_protodef_masterworker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022masterworker.proto\022\014masterworker\">\n\010Ma"
  "pReply\022\016\n\006status\030\001 \001(\010\022\"\n\032intermediate_f"
  "ile_location\030\002 \003(\t\"\035\n\013ReduceReply\022\016\n\006sta"
  "tus\030\001 \001(\010\"~\n\nMapRequest\022\020\n\010shard_id\030\001 \001("
  "\r\022\020\n\010n_output\030\002 \001(\r\022\017\n\007user_id\030\003 \001(\t\022\022\n\n"
  "output_dir\030\004 \001(\t\022\'\n\006shards\030\005 \003(\0132\027.maste"
  "rworker.ShardInfo\"H\n\tShardInfo\022\021\n\tfile_a"
  "ddr\030\001 \001(\t\022\024\n\014start_offest\030\002 \001(\r\022\022\n\nend_o"
  "ffset\030\003 \001(\r\"k\n\rReduceRequest\022\017\n\007user_id\030"
  "\001 \001(\t\022\022\n\noutput_dir\030\002 \001(\t\022!\n\031intermediat"
  "e_file_address\030\003 \003(\t\022\022\n\nreducer_id\030\004 \001(\r"
  "2\250\001\n\rWorkerService\022F\n\022RegisterMapService"
  "\022\030.masterworker.MapRequest\032\026.masterworke"
  "r.MapReply\022O\n\025RegisterReduceService\022\033.ma"
  "sterworker.ReduceRequest\032\031.masterworker."
  "ReduceReplyb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_masterworker_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_masterworker_2eproto = {
    false, false, 619, descriptor_table_protodef_masterworker_2eproto,
    "masterworker.proto",
    &descriptor_table_masterworker_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_masterworker_2eproto::offsets,
    file_level_metadata_masterworker_2eproto, file_level_enum_descriptors_masterworker_2eproto,
    file_level_service_descriptors_masterworker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_masterworker_2eproto_getter() {
  return &descriptor_table_masterworker_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_masterworker_2eproto(&descriptor_table_masterworker_2eproto);
namespace masterworker {

// ===================================================================

class MapReply::_Internal {
 public:
};

MapReply::MapReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:masterworker.MapReply)
}
MapReply::MapReply(const MapReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.intermediate_file_location_){from._impl_.intermediate_file_location_}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:masterworker.MapReply)
}

inline void MapReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.intermediate_file_location_){arena}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapReply::~MapReply() {
  // @@protoc_insertion_point(destructor:masterworker.MapReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.intermediate_file_location_.~RepeatedPtrField();
}

void MapReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapReply::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.MapReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intermediate_file_location_.Clear();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string intermediate_file_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_intermediate_file_location();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "masterworker.MapReply.intermediate_file_location"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.MapReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // repeated string intermediate_file_location = 2;
  for (int i = 0, n = this->_internal_intermediate_file_location_size(); i < n; i++) {
    const auto& s = this->_internal_intermediate_file_location(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.MapReply.intermediate_file_location");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.MapReply)
  return target;
}

size_t MapReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.MapReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string intermediate_file_location = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.intermediate_file_location_.size());
  for (int i = 0, n = _impl_.intermediate_file_location_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.intermediate_file_location_.Get(i));
  }

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapReply::GetClassData() const { return &_class_data_; }


void MapReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapReply*>(&to_msg);
  auto& from = static_cast<const MapReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.MapReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.intermediate_file_location_.MergeFrom(from._impl_.intermediate_file_location_);
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapReply::CopyFrom(const MapReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.MapReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapReply::IsInitialized() const {
  return true;
}

void MapReply::InternalSwap(MapReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.intermediate_file_location_.InternalSwap(&other->_impl_.intermediate_file_location_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[0]);
}

// ===================================================================

class ReduceReply::_Internal {
 public:
};

ReduceReply::ReduceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:masterworker.ReduceReply)
}
ReduceReply::ReduceReply(const ReduceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReduceReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:masterworker.ReduceReply)
}

inline void ReduceReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReduceReply::~ReduceReply() {
  // @@protoc_insertion_point(destructor:masterworker.ReduceReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReduceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReduceReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReduceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.ReduceReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReduceReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReduceReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.ReduceReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.ReduceReply)
  return target;
}

size_t ReduceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.ReduceReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReduceReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReduceReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReduceReply::GetClassData() const { return &_class_data_; }


void ReduceReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReduceReply*>(&to_msg);
  auto& from = static_cast<const ReduceReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.ReduceReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReduceReply::CopyFrom(const ReduceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.ReduceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceReply::IsInitialized() const {
  return true;
}

void ReduceReply::InternalSwap(ReduceReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReduceReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[1]);
}

// ===================================================================

class MapRequest::_Internal {
 public:
};

MapRequest::MapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:masterworker.MapRequest)
}
MapRequest::MapRequest(const MapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shards_){from._impl_.shards_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.output_dir_){}
    , decltype(_impl_.shard_id_){}
    , decltype(_impl_.n_output_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.output_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output_dir().empty()) {
    _this->_impl_.output_dir_.Set(from._internal_output_dir(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.shard_id_, &from._impl_.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.n_output_) -
    reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.n_output_));
  // @@protoc_insertion_point(copy_constructor:masterworker.MapRequest)
}

inline void MapRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shards_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.output_dir_){}
    , decltype(_impl_.shard_id_){0u}
    , decltype(_impl_.n_output_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapRequest::~MapRequest() {
  // @@protoc_insertion_point(destructor:masterworker.MapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shards_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
  _impl_.output_dir_.Destroy();
}

void MapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.MapRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shards_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _impl_.output_dir_.ClearToEmpty();
  ::memset(&_impl_.shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.n_output_) -
      reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.n_output_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 n_output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.n_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.MapRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string output_dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_output_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.MapRequest.output_dir"));
        } else
          goto handle_unusual;
        continue;
      // repeated .masterworker.ShardInfo shards = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.MapRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_shard_id(), target);
  }

  // uint32 n_output = 2;
  if (this->_internal_n_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_n_output(), target);
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.MapRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // string output_dir = 4;
  if (!this->_internal_output_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_dir().data(), static_cast<int>(this->_internal_output_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.MapRequest.output_dir");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_output_dir(), target);
  }

  // repeated .masterworker.ShardInfo shards = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shards_size()); i < n; i++) {
    const auto& repfield = this->_internal_shards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.MapRequest)
  return target;
}

size_t MapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.MapRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .masterworker.ShardInfo shards = 5;
  total_size += 1UL * this->_internal_shards_size();
  for (const auto& msg : this->_impl_.shards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string output_dir = 4;
  if (!this->_internal_output_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_dir());
  }

  // uint32 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shard_id());
  }

  // uint32 n_output = 2;
  if (this->_internal_n_output() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_n_output());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapRequest::GetClassData() const { return &_class_data_; }


void MapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapRequest*>(&to_msg);
  auto& from = static_cast<const MapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.MapRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shards_.MergeFrom(from._impl_.shards_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_output_dir().empty()) {
    _this->_internal_set_output_dir(from._internal_output_dir());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_n_output() != 0) {
    _this->_internal_set_n_output(from._internal_n_output());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapRequest::CopyFrom(const MapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.MapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRequest::IsInitialized() const {
  return true;
}

void MapRequest::InternalSwap(MapRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shards_.InternalSwap(&other->_impl_.shards_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_dir_, lhs_arena,
      &other->_impl_.output_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapRequest, _impl_.n_output_)
      + sizeof(MapRequest::_impl_.n_output_)
      - PROTOBUF_FIELD_OFFSET(MapRequest, _impl_.shard_id_)>(
          reinterpret_cast<char*>(&_impl_.shard_id_),
          reinterpret_cast<char*>(&other->_impl_.shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[2]);
}

// ===================================================================

class ShardInfo::_Internal {
 public:
};

ShardInfo::ShardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:masterworker.ShardInfo)
}
ShardInfo::ShardInfo(const ShardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_addr_){}
    , decltype(_impl_.start_offest_){}
    , decltype(_impl_.end_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_addr().empty()) {
    _this->_impl_.file_addr_.Set(from._internal_file_addr(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_offest_, &from._impl_.start_offest_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_offset_) -
    reinterpret_cast<char*>(&_impl_.start_offest_)) + sizeof(_impl_.end_offset_));
  // @@protoc_insertion_point(copy_constructor:masterworker.ShardInfo)
}

inline void ShardInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_addr_){}
    , decltype(_impl_.start_offest_){0u}
    , decltype(_impl_.end_offset_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShardInfo::~ShardInfo() {
  // @@protoc_insertion_point(destructor:masterworker.ShardInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_addr_.Destroy();
}

void ShardInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.ShardInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_addr_.ClearToEmpty();
  ::memset(&_impl_.start_offest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_offset_) -
      reinterpret_cast<char*>(&_impl_.start_offest_)) + sizeof(_impl_.end_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.ShardInfo.file_addr"));
        } else
          goto handle_unusual;
        continue;
      // uint32 start_offest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.start_offest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 end_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.end_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.ShardInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_addr = 1;
  if (!this->_internal_file_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_addr().data(), static_cast<int>(this->_internal_file_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.ShardInfo.file_addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_addr(), target);
  }

  // uint32 start_offest = 2;
  if (this->_internal_start_offest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_offest(), target);
  }

  // uint32 end_offset = 3;
  if (this->_internal_end_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.ShardInfo)
  return target;
}

size_t ShardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.ShardInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_addr = 1;
  if (!this->_internal_file_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_addr());
  }

  // uint32 start_offest = 2;
  if (this->_internal_start_offest() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_offest());
  }

  // uint32 end_offset = 3;
  if (this->_internal_end_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardInfo::GetClassData() const { return &_class_data_; }


void ShardInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardInfo*>(&to_msg);
  auto& from = static_cast<const ShardInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.ShardInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_addr().empty()) {
    _this->_internal_set_file_addr(from._internal_file_addr());
  }
  if (from._internal_start_offest() != 0) {
    _this->_internal_set_start_offest(from._internal_start_offest());
  }
  if (from._internal_end_offset() != 0) {
    _this->_internal_set_end_offset(from._internal_end_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardInfo::CopyFrom(const ShardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.ShardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfo::IsInitialized() const {
  return true;
}

void ShardInfo::InternalSwap(ShardInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_addr_, lhs_arena,
      &other->_impl_.file_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardInfo, _impl_.end_offset_)
      + sizeof(ShardInfo::_impl_.end_offset_)
      - PROTOBUF_FIELD_OFFSET(ShardInfo, _impl_.start_offest_)>(
          reinterpret_cast<char*>(&_impl_.start_offest_),
          reinterpret_cast<char*>(&other->_impl_.start_offest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[3]);
}

// ===================================================================

class ReduceRequest::_Internal {
 public:
};

ReduceRequest::ReduceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:masterworker.ReduceRequest)
}
ReduceRequest::ReduceRequest(const ReduceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReduceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.intermediate_file_address_){from._impl_.intermediate_file_address_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.output_dir_){}
    , decltype(_impl_.reducer_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.output_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output_dir().empty()) {
    _this->_impl_.output_dir_.Set(from._internal_output_dir(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.reducer_id_ = from._impl_.reducer_id_;
  // @@protoc_insertion_point(copy_constructor:masterworker.ReduceRequest)
}

inline void ReduceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.intermediate_file_address_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.output_dir_){}
    , decltype(_impl_.reducer_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReduceRequest::~ReduceRequest() {
  // @@protoc_insertion_point(destructor:masterworker.ReduceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReduceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.intermediate_file_address_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
  _impl_.output_dir_.Destroy();
}

void ReduceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReduceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.ReduceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intermediate_file_address_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _impl_.output_dir_.ClearToEmpty();
  _impl_.reducer_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReduceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.ReduceRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string output_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_output_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.ReduceRequest.output_dir"));
        } else
          goto handle_unusual;
        continue;
      // repeated string intermediate_file_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_intermediate_file_address();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "masterworker.ReduceRequest.intermediate_file_address"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 reducer_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.reducer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReduceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.ReduceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.ReduceRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string output_dir = 2;
  if (!this->_internal_output_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_dir().data(), static_cast<int>(this->_internal_output_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.ReduceRequest.output_dir");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_dir(), target);
  }

  // repeated string intermediate_file_address = 3;
  for (int i = 0, n = this->_internal_intermediate_file_address_size(); i < n; i++) {
    const auto& s = this->_internal_intermediate_file_address(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.ReduceRequest.intermediate_file_address");
    target = stream->WriteString(3, s, target);
  }

  // uint32 reducer_id = 4;
  if (this->_internal_reducer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_reducer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.ReduceRequest)
  return target;
}

size_t ReduceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.ReduceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string intermediate_file_address = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.intermediate_file_address_.size());
  for (int i = 0, n = _impl_.intermediate_file_address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.intermediate_file_address_.Get(i));
  }

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string output_dir = 2;
  if (!this->_internal_output_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_dir());
  }

  // uint32 reducer_id = 4;
  if (this->_internal_reducer_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reducer_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReduceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReduceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReduceRequest::GetClassData() const { return &_class_data_; }


void ReduceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReduceRequest*>(&to_msg);
  auto& from = static_cast<const ReduceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.ReduceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.intermediate_file_address_.MergeFrom(from._impl_.intermediate_file_address_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_output_dir().empty()) {
    _this->_internal_set_output_dir(from._internal_output_dir());
  }
  if (from._internal_reducer_id() != 0) {
    _this->_internal_set_reducer_id(from._internal_reducer_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReduceRequest::CopyFrom(const ReduceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.ReduceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceRequest::IsInitialized() const {
  return true;
}

void ReduceRequest::InternalSwap(ReduceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.intermediate_file_address_.InternalSwap(&other->_impl_.intermediate_file_address_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_dir_, lhs_arena,
      &other->_impl_.output_dir_, rhs_arena
  );
  swap(_impl_.reducer_id_, other->_impl_.reducer_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReduceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::masterworker::MapReply*
Arena::CreateMaybeMessage< ::masterworker::MapReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::MapReply >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::ReduceReply*
Arena::CreateMaybeMessage< ::masterworker::ReduceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::ReduceReply >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::MapRequest*
Arena::CreateMaybeMessage< ::masterworker::MapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::MapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::ShardInfo*
Arena::CreateMaybeMessage< ::masterworker::ShardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::ShardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::ReduceRequest*
Arena::CreateMaybeMessage< ::masterworker::ReduceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::ReduceRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
